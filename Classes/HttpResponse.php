<?php

abstract class HttpResponse extends SafeObject implements IResponse
{
	/**
	 * Here are http response codes as described by RFC 2616 (http://www.faqs.org/rfcs/rfc2616.html)
	 * Other known extension codes are commented out.
	 * @var array
	 */
	public static $HTTP_CODE_PHRASE = array(
	    /* HTTP 1xx Informational */
	    100=>"Continue",
	    101=>"Switching Protocols",
	    //102=>"Processing",
	    //122=>"Request-URI too long",

		/* HTTP 2xx Success */
	    200=>"OK",
	    201=>"Created",
	    202=>"Accepted",
	    203=>"Non-Authoritative Information",
	    204=>"No Content",
	    205=>"Reset Content",
	    206=>"Partial Content",
	    //207=>"Multi-Status",
	    //226=>"IM Used", // (RFC 3229) The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.

		/* HTTP 3xx Redirection */
	    300=>"Multiple Choices",
	    301=>"Moved Permanently",
	    302=>"Found",
	    303=>"See Other",
	    304=>"Not Modified",
	    305=>"Use Proxy",
	    //306=>"Switch Proxy", // deprecated
	    307=>"Temporary Redirect",

		/* HTTP 4xx Client Error */
	    400=>"Bad Request",
	    401=>"Unauthorized",
	    402=>"Payment Required",
	    403=>"Forbidden",
	    404=>"Not Found",
	    405=>"Method Not Allowed",
	    406=>"Not Acceptable",
	    407=>"Proxy Authentication Required",
	    408=>"Request Time-out",
	    409=>"Conflict",
	    410=>"Gone",
	    411=>"Length Required",
	    412=>"Precondition Failed",
	    413=>"Request Entity Too Large",
	    414=>"Request-URI Too Large",
	    415=>"Unsupported Media Type",
	    416=>"Requested range not satisfiable",
	    417=>"Expectation Failed",
	    //418=>"I'm a teapot",
	    422=>"Unprocessable Entity",
	    423=>"Locked",
	    424=>"Failed Dependency",
	    425=>"No code",
	    426=>"Upgrade Required",

	    /* others... */
	    //444=>"No Response", // An Nginx HTTP server extension. The server returns no information to the client and closes the connection (useful as a deterrent for malware).
		//449=>"Retry With", // A Microsoft extension. The request should be retried after performing the appropriate action.
		//450=>"Blocked by Windows Parental Controls", // A Microsoft extension. This error is given when Windows Parental Controls are turned on and are blocking access to the given webpage.
		//499=>"Client Closed Request", // An Nginx HTTP server extension. This code is introduced to log the case when the connection is closed by client while HTTP server is processing its request, making server unable to send the HTTP header back.

		/* HTTP 5xx Server Error */
	    500=>"Internal Server Error",
	    501=>"Not Implemented",
	    502=>"Bad Gateway",
	    503=>"Service Unavailable",
	    504=>"Gateway Time-out",
	    505=>"HTTP Version not supported",
	    //506=>"Variant Also Negotiates",
	    //507=>"Insufficient Storage",
	    //510=>"Not Extended"
	);

	/*
	 * Generated by code:
	 * foreach(HttpResponse::HTTP_CODE_PHRASE as $k=>$v) {
	 * 		$v = str_replace(array(' ', '-', "'"), '_', strtoupper($v));
	 *		echo "\tconst HTTP_$v = $k;\n";
	 * }
	 */

	/**
	 * @abstract RFC 2616:<br/>
	 * The client SHOULD continue with its request. This interim response is used to inform the client that the initial part of the request has been received and has not yet been rejected by the server. The client SHOULD continue by sending the remainder of the request or, if the request has already been completed, ignore this response. The server MUST send a final response after the request has been completed. See section 8.2.3 for detailed discussion of the use and handling of this status code.
	 */
	const HTTP_CONTINUE = 100;
	const HTTP_SWITCHING_PROTOCOLS = 101;

	/**
	 * @abstract RFC 2616:<br/>
	 * The request has succeeded. The information returned with the response is dependent on the method used in the request, for example:<br/>
	 * GET an entity corresponding to the requested resource is sent in the response;<br/>
	 * HEAD the entity-header fields corresponding to the requested resource are sent in the response without any message-body;<br/>
	 * POST an entity describing or containing the result of the action;<br/>
	 * TRACE an entity containing the request message as received by the end server.
	 */
	const HTTP_OK = 200;

	/**
	 * @abstract RFC 2616:<br/>
	 * The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.<br/>
	 * A 201 response MAY contain an ETag response header field indicating the current value of the entity tag for the requested variant just created, see section 14.19.
	 */
	const HTTP_CREATED = 201;

	/**
	 * @abstract RFC 2616:<br/>
	 * The request has been accepted for processing, but the processing has not been completed. The request might or might not eventually be acted upon, as it might be disallowed when processing actually takes place. There is no facility for re-sending a status code from an asynchronous operation such as this.<br/>
	 * The 202 response is intentionally non-committal. Its purpose is to allow a server to accept a request for some other process (perhaps a batch-oriented process that is only run once per day) without requiring that the user agent's connection to the server persist until the process is completed. The entity returned with this response SHOULD include an indication of the request's current status and either a pointer to a status monitor or some estimate of when the user can expect the request to be fulfilled.
	 */
	const HTTP_ACCEPTED = 202;
	const HTTP_NON_AUTHORITATIVE_INFORMATION = 203;
	const HTTP_NO_CONTENT = 204;
	const HTTP_RESET_CONTENT = 205;
	const HTTP_PARTIAL_CONTENT = 206;

	/**
	 * @abstract RFC 2616:<br/>
	 * The requested resource corresponds to any one of a set of representations, each with its own specific location, and agent- driven negotiation information (section 12) is being provided so that the user (or user agent) can select a preferred representation and redirect its request to that location.<br/>
	 * Unless it was a HEAD request, the response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content- Type header field. Depending upon the format and the capabilities of
	 * the user agent, selection of the most appropriate choice MAY be performed automatically. However, this specification does not define any standard for such automatic selection.<br/>
	 * If the server has a preferred choice of representation, it SHOULD include the specific URI for that representation in the Location field; user agents MAY use the Location field value for automatic redirection. This response is cacheable unless indicated otherwise.
	 */
	const HTTP_MULTIPLE_CHOICES = 300;

	/**
	 * @abstract RFC 2616:<br/>
	 * The requested resource has been assigned a new permanent URI and any future references to this resource SHOULD use one of the returned URIs. Clients with link editing capabilities ought to automatically re-link references to the Request-URI to one or more of the new references returned by the server, where possible. This response is cacheable unless indicated otherwise.<br/>
	 * The new permanent URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).<br/>
	 * If the 301 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.<br/>
	 *
	 * <em><strong>Note:</strong>
	 * When automatically redirecting a POST request after
	 * receiving a 301 status code, some existing HTTP/1.0 user agents
	 * will erroneously change it into a GET request.</em>
	 */
	const HTTP_MOVED_PERMANENTLY = 301;

	/**
	 * @abstract RFC 2616:<br/>
	 * The requested resource resides temporarily under a different URI. Since the redirection might be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.<br/>
	 * The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).<br/>
	 * If the 302 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.<br/>
	 *
	 * <em><strong>Note:</strong>
	 * RFC 1945 and RFC 2068 specify that the client is not allowed
	 * to change the method on the redirected request.  However, most
	 * existing user agent implementations treat 302 as if it were a 303
	 * response, performing a GET on the Location field-value regardless
	 * of the original request method. The status codes 303 and 307 have
	 * been added for servers that wish to make unambiguously clear which
	 * kind of reaction is expected of the client.
	 */
	const HTTP_FOUND = 302;

	/**
	 * @abstract RFC 2616:<br/>
	 * The response to the request can be found under a different URI and SHOULD be retrieved using a GET method on that resource. This method exists primarily to allow the output of a POST-activated script to redirect the user agent to a selected resource. The new URI is not a substitute reference for the originally requested resource. The 303 response MUST NOT be cached, but the response to the second (redirected) request might be cacheable.<br/>
	 * The different URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s).<br/>
	 *
	 * <em><strong>Note:</strong>
	 * Many pre-HTTP/1.1 user agents do not understand the 303
      status. When interoperability with such clients is a concern, the
      302 status code may be used instead, since most user agents react
      to a 302 response as described here for 303.
	 */
	const HTTP_SEE_OTHER = 303;

	const HTTP_NOT_MODIFIED = 304;
	const HTTP_USE_PROXY = 305;

	/**
	 * @abstract RFC 2616:<br/>
	 * The requested resource resides temporarily under a different URI. Since the redirection MAY be altered on occasion, the client SHOULD continue to use the Request-URI for future requests. This response is only cacheable if indicated by a Cache-Control or Expires header field.<br/>
	 * The temporary URI SHOULD be given by the Location field in the response. Unless the request method was HEAD, the entity of the response SHOULD contain a short hypertext note with a hyperlink to the new URI(s) , since many pre-HTTP/1.1 user agents do not understand the 307 status. Therefore, the note SHOULD contain the information necessary for a user to repeat the original request on the new URI.<br/>
	 * If the 307 status code is received in response to a request other than GET or HEAD, the user agent MUST NOT automatically redirect the request unless it can be confirmed by the user, since this might change the conditions under which the request was issued.
	 */
	const HTTP_TEMPORARY_REDIRECT = 307;

	/**
	 * @abstract RFC 2616:<br/>
	 * The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.
	 */
	const HTTP_BAD_REQUEST = 400;
	const HTTP_UNAUTHORIZED = 401;
	const HTTP_PAYMENT_REQUIRED = 402;

	/**
	 * @abstract RFC 2616:<br/>
	 * The server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity. If the server does not wish to make this information available to the client, the status code 404 (Not Found) can be used instead.
	 */
	const HTTP_FORBIDDEN = 403;

	/**
	 * @abstract RFC 2616:<br/>
	 * The server has not found anything matching the Request-URI. No indication is given of whether the condition is temporary or permanent. The 410 (Gone) status code SHOULD be used if the server knows, through some internally configurable mechanism, that an old resource is permanently unavailable and has no forwarding address. This status code is commonly used when the server does not wish to reveal exactly why the request has been refused, or when no other response is applicable.
	 */
	const HTTP_NOT_FOUND = 404;

	const HTTP_METHOD_NOT_ALLOWED = 405;
	const HTTP_NOT_ACCEPTABLE = 406;
	const HTTP_PROXY_AUTHENTICATION_REQUIRED = 407;
	const HTTP_REQUEST_TIME_OUT = 408;
	const HTTP_CONFLICT = 409;
	const HTTP_GONE = 410;
	const HTTP_LENGTH_REQUIRED = 411;
	const HTTP_PRECONDITION_FAILED = 412;
	const HTTP_REQUEST_ENTITY_TOO_LARGE = 413;
	const HTTP_REQUEST_URI_TOO_LARGE = 414;
	const HTTP_UNSUPPORTED_MEDIA_TYPE = 415;
	const HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = 416;
	const HTTP_EXPECTATION_FAILED = 417;
	const HTTP_UNPROCESSABLE_ENTITY = 422;
	const HTTP_LOCKED = 423;
	const HTTP_FAILED_DEPENDENCY = 424;
	const HTTP_NO_CODE = 425;
	const HTTP_UPGRADE_REQUIRED = 426;
	const HTTP_INTERNAL_SERVER_ERROR = 500;
	const HTTP_NOT_IMPLEMENTED = 501;
	const HTTP_BAD_GATEWAY = 502;
	const HTTP_SERVICE_UNAVAILABLE = 503;
	const HTTP_GATEWAY_TIME_OUT = 504;
	const HTTP_HTTP_VERSION_NOT_SUPPORTED = 505;

	/**
	 * Associative array of value array (key => array(value1, value2))
	 * @var array
	 */
	private $headers = array();

	/**
	 * HTTP response code
	 * @var int
	 */
	private $http_response_code;

	public function __costruct($http_response_code = 200)
	{
		parent::__construct();
		$this->http_response_code = $http_response_code;
	}

	/**
	 * Set HTTP response code
	 * @return HttpResponse fluent interface
	 */
	public function setResponseCode()
	{
		$this->http_response_code = $code;
		return $this;
	}

	/**
	 * Get HTTP response code
	 * @return int
	 */
	public function getResponseCode()
	{
		return $this->http_response_code;
	}

	public function getResponsePhrase($code = null)
	{
		if($code === null)
			$code = $this->http_response_code;
		return self::responsePhrase($code);
	}

	/**
	 * Get HTTP response phrase, like 'OK' or 'Not Found'
	 * @return string
	 */
	public static function responsePhrase($code)
	{
		if(isset(self::$HTTP_CODE_PHRASE[$code]))
			return self::$HTTP_CODE_PHRASE[$code];

		if($code < 100)
			return false;
		if($code < 200) // 1xx
			return "Informational HTTP Class";
		if($code < 300) // 2xx
			return "OK HTTP Class";
		if($code < 400) // 3xx
			return "Redirection HTTP Class";
		if($code < 500) // 4xx
			return "Client Error HTTP Class";
		if($code < 600) // 5xx
			return "Server Error HTTP Class";

		return false;
	}

	public function setHeader($name, $value, $replace=true)
	{
		$name = strtolower($name);
		$value = (string)$value;

		if($replace)
			$this->headers[$name] = array(true, $value);
		else
		{
			if(isset($this->headers[$name]))
			{
				if(is_array($this->headers[$name]))
					$this->headers[$name][] = $value;
			}
			else
				$this->headers[$name] = array($value);
		}
	}

	/**
	 * Set HTTP headers
	 */
	public function writeResponseHeader()
	{
		// precondition
		$file = ''; $line = '';
		if(headers_sent($file, $line))
			throw new ApplicationException("Headers already sent (in '$file' at line $line)");

		$code = $this->getResponseCode();
		$phrase = $this->getResponsePhrase();

		foreach($this->headers as $key=>$values)
		{
			$replace = false;
			foreach($values as $val)
			{
				if($val === true)
					$replace = true;
				else
				{
					header("$key: $val", $replace, $code);
					$replace = false;
				}
			}
		}

		// header() can behave strange if 'Location' is passed..
		header("HTTP/1.1 $code $phrase", true, $code);
	}

	//public abstract function writeResponseContent();

	public function writeResponse()
	{
		$this->writeResponseHeader();
		$this->writeResponseContent();
	}
}
